function [img_edges, amplified_edges, enhancedImg, enhancedImg1, enhancedImg2] = mask( img )


imgSz = size(img); % read in image size
rowLength = imgSz(1,1); % M length
colLength = imgSz(1,2); %N length
row_boundary = rowLength - 1; % since the laplacian mask is a 3x3 matrix I will only be 
col_boundary = colLength -1;
laplacian_mask = [0,1,0; 1, -4, 1; 0,1,0];
img_edges = zeros(rowLength, colLength); % initialize output array

for J = 2:row_boundary
    for I = 2: col_boundary
        img_matrix = [img(J-1, I-1:I+1); img(J, I-1: I+1); img(J+1, I-1:I+1);];
        temp_matrix = laplacian_mask .* img_matrix; %multiplies the image matrix against the laplacian mask
        sumCol = sum(temp_matrix); % sums the 3x3 matrix into a 1x3 matrix holding the sum of each column
        sumTotal = sum(sumCol); % sums all of the columns into a singl value representing the sum of the entire matrix
        img_edges(J,I) = sumTotal; % update the image value
    
    
    end
    
end



amplified_edges = zeros(rowLength, colLength); % initialize output array
for K = 1: rowLength*colLength
    if img_edges(K) < 0
        amplified_edges(K) = img_edges(K).*2;
    else
        amplified_edges(K) = img_edges(K);
    end
    
end
%enhanced = img + outputImage;
enhancedImg = img - img_edges;
enhancedImg1 = img - amplified_edges;
enhancedImg2 = img + amplified_edges;

end